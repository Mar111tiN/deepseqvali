rule merge_bam:
    '''
    here the split and umified bams are merged
    depending on input required by recalib, this can be umi/X-Y.bam or mapped
    !!! the merge has to retain the bam headers of the individual files

    '''

    input:  # here I need a switch if no UMI is involved
        expand("mapped/{{sample}}_{{type}}.{split}.bam", split=list(range(config['fastq']['split_factor'])))
    output:
        bam = "bam_merge/{sample}_{type}.bam"    # sambamba automatically creates a bam.bai
    threads:
        config['merge_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba merge -t {threads} {output.bam} mapped/{wildcards.sample}_{wildcards.type}.*.bam; "
        "rm {input};"

        # OPTIONB: picard AddOrReplaceReadGroups

rule resplit_bam:
    '''
    chromosome-split merged bams into chromosome-split bams (one split per job) with index
    '''

    input:
        bam = "bam_merge/{sample}_{type}.bam"
    output:
        bam = "bam_merge/{sample}_{type}.{chrom}.bam"
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba view -t {threads} -h -f bam -o {output.bam} {input.bam} {wildcards.chrom} "


######### FINAL BAM AND SPLIT ########################

rule merge_final_bam:
    '''
    here the chr-split bams files corresponding to the mpileup output are created
    this step is needed for PoN-list
    bamfinal is also consumed by the bam QC
    '''

    input:
        bam = expand("bamfinalsplit/{{sample}}_{{type}}.{chrom}.bam", chrom=chrom_list)
    output:
        bam = "bamfinal/{sample}_{type}.bam"
    params:
        rerun_bam = get_rerun_bam
    threads:
        config['merge_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    script:
        "../scripts/merge_final_bam.py"


############# rerun ##############################################


rule split_final_bam:
    """
    if you do a rerun of final bams, this creates the split bams needed to go on with the pipeline
    """

    input: 
        bam = get_bamfinalsplit_input
    output:
        bam = "bamfinalsplit/{sample}_{type}.{chrom}.bam"
    params:
        rerun_bam = get_rerun_bam
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    script:
        "../scripts/split_final_bam.py"