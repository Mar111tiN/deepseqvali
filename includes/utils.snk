import os
from datetime import datetime as dt


ansii_colors = {
    'magenta': '[1;35;2m',
    'green': '[1;9;2m',
    'red': '[1;31;1m',
    'cyan': '[1;36;1m',
    'gray': '[1;30;1m',
    'black': '[0m'
}

colors = {
    'process': ansii_colors['green'],
    'time': ansii_colors['magenta'],
    'normal': ansii_colors['gray'],
    'warning': ansii_colors['red'],
    'success': ansii_colors['cyan']
}


def show_output(text, color='normal', multi=False, time=True, **kwargs):
    '''
    get colored output to the terminal
    '''
    time = f"\033{colors['time']}{dt.now().strftime('%H:%M:%S')}\033[0m : " if time else ''
    proc = f"\033{colors['process']}Process {os.getpid()}\033[0m : " if multi else ''
    text = f"\033{colors[color]}{text}\033[0m"
    print(time + proc + text, **kwargs)



def sort_df(df, cols={'Chr': True, 'Start': True}):
    '''
    helper for sorting dfs for chromosomes using Chr, Start + cols in cols
    '''
    # make Chr column categorical for sorting .. and sort
    chrom_list = [f"chr{i}" for i in range(23)] + ['chrX', 'chrY']

    df['Chr'] = pd.Categorical(df['Chr'], chrom_list)
    return df.sort_values(list(cols.keys()), ascending=list(cols.values()))

def reduce_regions(bed_df, padding):
    '''
    takes a mutation list and returns a region list using padding
    overlapping regions are reduced to one using the gap strategy
    '''
    
    dfs = []
    for chrom in bed_df['Chr'].unique():
        df = bed_df.query('Chr == @chrom')
        df = df.sort_values('Start')
        # add the padding
        df['Start'] = df['Start'] - padding
        df['End'] = df['End'] + padding
        # find the break points
        # if Start is greater than previous End (using shift), this is a gap --> df['gap'] = 1
        df['gap'] = df['Start'].gt(df['End'].shift()).astype('int')
        # id different reads according to gap
        # cumulative sum does not increase at df['gap'] == 0 and so these consecutive stretches are grouped together
        df['gap'] = df['gap'].cumsum()
        # groupby the coverage break group and condense individual coverage islands
        # agg has to contain the neccessary shared columns TransLength because it is needed for coverage computation
        df = df.groupby('gap').agg({'Chr': 'first', 'Start': 'min', 'End': 'max'})
        dfs.append(df.reset_index('gap').drop(columns='gap'))
    bed_df = sort_df(pd.concat(dfs))
    return bed_df
    

def mut2bed(df, padding=0, zero_based=True):
    '''
    takes a mutation df
    if Ref/Alt columns are there, adjust Start and End accordingly:
    if regions are given, collapse overlapping regions
    return sorted df
    '''
    
    if 'Ref' in df.columns and 'Alt' in df.columns:
        # adjust the coords
        df['Start'] = df['Start'] - (df['Alt'] == "-")
        df['End'] = df['Start'] + df['Ref'].str.len() - 1
    
    # add End column if not given
    if not 'End' in df.columns:
        df.loc[:, 'End'] = df['Start']
    # get the bedfile with padded and collapsed regions
    
    bed_df = reduce_regions(df, padding)
    # perform the bed shift for 0-based
    bed_df.loc[:, 'Start'] = bed_df['Start'] - zero_based
    return bed_df


def get_coverage_bedfile(mut_df, folder='', pad=10):
    '''
    get_bedfile maker: partial function usable as callback in params
    '''

    def get_bedfile(sample):
        '''
        selects the sample from mut_df
        extracts InsertRange into Start, End and returns a collapsed bed-file
        '''
        
        df = mut_df.query('sample == @sample').loc[:, 'Chr':]
        df[['Start', 'End']] = df['InsertRange'].str.extract(r"chr[0-9XY]+:([0-9]+)-([0-9]+)")
        for col in ['Start', 'End']:
            df.loc[:, col] = df[col].astype(int)
        df = df[['Chr', 'Start', 'End']]
        bed_df = mut2bed(df, padding=pad)
        bed_file = os.path.join(folder, f"{sample}.cov.bed")
        bed_df.to_csv(bed_file, sep='\t', index=False, header=None)
        return bed_file
    return get_bedfile


def get_snp_bedfile(mut_df, folder=''):
    '''
    get_bedfile maker: partial function usable as callback in params
    '''

    if not os.path.isdir(folder):
        os.makedirs(folder)

    def get_bedfile(sample):
        '''
        selects the sample from mut_df and returns a bed-file for samtools
        '''
        
        df = mut_df.query('sample == @sample').loc[:, 'Chr':]
        df = df[['Chr', 'Start', 'End']]
        bed_df = mut2bed(df, padding=0)
        bed_file = os.path.join(folder, f"{sample}.snp.bed")
        bed_df.to_csv(bed_file, sep='\t', index=False, header=None)
        return bed_file
    return get_bedfile