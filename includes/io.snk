import pandas as pd
import os
import re


def get_files(folder_list, sample_sheet):
    '''
    retrieves the path to all the files in the sample_sheet
    if rerun == False, it looks for fastq files
    if rerun == True, it looks for bam files
    '''

    # check whether single folder or folder list
    if len(folder_list[0]) == 1:
        folder_list = [folder_list]
    
    # check full path or append path to scriptdir
    if not sample_sheet.startswith('/'):
        sample_sheet = os.path.join(snakedir, sample_sheet)
    # import the sample sheet (with file extension check)
    if os.path.splitext(sample_sheet)[1] == ".xlsx":
        show_output(
            f"Reading excel file {sample_sheet}",
        )
        mut_df = pd.read_excel(sample_sheet)
    else:
        show_output(
            f"Reading csv sample sheet {sample_sheet}",
        )
        mut_df = pd.read_csv(sample_sheet, sep='\t')
    samples = mut_df.groupby('sample').first().iloc[:,:1]
    # for fastq files:
    fastq_list = []
    short_list = []
    # cycle through the input folders and look for matching fastq files
    for input_folder in folder_list:
        for folder, _, files in os.walk(input_folder):
            for file in files:
                if '.fastq.' in file and '.md5' not in file and 'trim' not in file and 'sub' not in file:
                    fastq_list.append(os.path.join(folder, file))
                    short_list.append(file)

    def get_fastq_paths(row, fastq_list=None):
        '''
        go through the sample list and find the respective read and index fastqs in the respective fastq_list
        '''

        # get the nomenclature for the fastq files from config
        read1 = 'R1'
        read2 = 'R2'
        index = config['samples']['umi_barcode'] if config['samples']['umi_barcode'] else None

        for file in fastq_list:
            # get the basename
            base_file = os.path.basename(file)
            if  base_file.startswith(f"{row.name}_"):
                if index:
                    if f'_{index}' in base_file:
                        row['index'] = file
                elif f'_{read1}_' in base_file:
                    row['R1'] = file
                elif f'_{read2}_' in base_file:
                    row['R2'] = file
        cols = ['R1', 'R2']
        if config['samples']['umi_barcode']:
            cols.append(onfig['samples']['umi_barcode'])
        return row.reindex(cols)

    samples_df = samples.apply(get_fastq_paths, axis=1, fastq_list=fastq_list)
    short_df = samples.apply(get_fastq_paths, axis=1, fastq_list=short_list)

    # ########## DEBUG #################
    # print(short_df)
    # print(samples_df)
    # ##################################

    return samples_df, short_df, mut_df


def get_fastq(w):
    '''
    returns fastq path from wildcards sample and read
    '''

    return sample_df.loc[w.sample, w.read]


# ###################### FASTQC ###########################
def get_fastqc_list(_):
    '''
    returns the complete list of required fastqc files depending on trim option
    '''
    reads = ['R1', 'R2']
    fastqc_list = [f"fastqc/{s}_{r}_fastqc.zip" for s in short_df.index for r in reads]
    return fastqc_list


# ###################### ubamXT #########################################
def get_FastqToSam_input(w):
    '''
    retrieve either ...fastq or fastq.trim pairs depending on config:trim:trimming value for bwa alignment
    '''

    reads = ['R1', 'R2']
    # add the index read, if UMIs are involved
    if config['setup']['UMI']:
        reads.append('index')

    return sample_df.loc[w.sample, reads]


# ############## INDEL REALIGNER ######################
def get_IR_input(w):
    '''
    complex sample switch depending on pipeline settings
    !!!! ELABORATE
    if UMIs are used, do not dedup before the UMI-filtering steps (if active)
    if UMI-filter is inactive, just dedup using umis
    if no UMIs are used, just mark_dups before realigning
    '''

    if config['setup']['UMI']:
        if config['UMI_filter']['run']:
            bam = f"mapped/{w.sample}.bam"
        else:
            bam = f"umi_deduped/{w.sample}.bam"
    else:
        bam = f"deduped/{w.sample}.bam"
    return {'bam': bam}

###### GENERAL UTILITY ##################################
def full_path(file):

    '''
    returns the full path to a reference
    '''

    build = config['ref']['build']
    full_ref_path = os.path.join(config['paths']['mystatic'], config['ref'][build][file])
    return full_ref_path



def get_bedfile_maker(folder='bed'):
    '''
    function factory returning get_bedfile function set to certain output path
    '''
    if not os.path.isdir(folder):
        show_output(f'Creating bed_folder {folder}.')
        os.makedirs(folder)
    def get_bedfile(w):
        '''
        creates bedfile from global mut_df restricted to w.sample and returns the bed_file path
        '''
        
        sample = w.sample
        bed_df = mut_df.query('sample == @sample').loc[:, 'Chr':]
        bed_df.loc[:, 'Start'] = bed_df['Start'] - 1 - (bed_df['Alt'] == '-').astype(int)
        bed_df.loc[:, 'End'] = bed_df['Start'] + 1
        bed_file = f"{folder}/{sample}.bed"
        bed_df.iloc[:, :3].to_csv(bed_file, sep='\t', index=False, header=None)
        return bed_file
    return get_bedfile



################### LEGACY ######################################

# def full_path(file):

#     '''
#     returns the full path to a reference
#     '''

#     build = config['ref']['build']
#     full_ref_path = os.path.join(config['paths']['mystatic'], config['ref'][build][file])
#     return full_ref_path


# def static_path(file):
#     '''
#     returns the absolute path when given relative to static folder
#     '''

#     return os.path.join(config['paths']['mystatic'], file)


# def get_fastq_origin(w):
#     '''
#     returns the path to the original fastq file
#     '''
#     path = os.path.join(config['inputdir'], "fastq")
#     return f"{path}/{w.sample}_{w.type}_R{w.read}.fastq"


# def get_fastq_link(w):
#     '''
#     returns the path to the fastq-symlink in the work directory
#     '''
#     return f"fastq/{w.sample}_{w.type}_R{w.read}.fastq"


# def get_fastq_pair(w):
#     return [f"fastq/{w.sample}_{w.type}_R{read}.fastq" for read in [1, 2]]
