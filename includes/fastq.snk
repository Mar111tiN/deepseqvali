rule get_fastq:
    input:
        get_fastq  # looks up samples from file_list
    output:
        "fastq/{sample}_{read}.fastq.gz"
    threads: 
        config['fastq']['threads']
    wildcard_constraints:
        sample = "[^/]+"
    script:
        "../scripts/get_fastq.py"


rule fastqc:
    input: "fastq/{sample}_{read}.fastq.gz"
    output: "fastqc/{sample}_{read}_fastqc.zip"
    threads: 4
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    shell:
        "fastqc {input} -o fastqc/ "


rule fastq_multiQC:
    input:
        get_fastqc_list
    output:
        "QC/fastQC.html"
    threads: 2
    conda:
        f"../{config['envs']}/fastQC-env.yml"
    shell:
        "multiqc -f -o QC/ -n fastQC --interactive fastqc/; "  # interactive for big number of files
        "rm -f fastqc/*_fastqc.html fastq/*.sub"  # leave the zip files for accumulated multiQC of all processed samples
