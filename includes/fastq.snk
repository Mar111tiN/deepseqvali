rule get_fastq:
    input:
        get_fastqs  # looks up samples from file_list
    output:
        "fastq/{sample}_{type}_{read_or_index}.fastq.gz"
    threads: 
        config['fastq']['threads']
    wildcard_constraints:
        sample = "[^/]+"
    script:
        "../scripts/get_fastq.py"


rule split_fastq:
    input:
        "fastq/{sample}_{type}_{read_or_index}.fastq.gz"
    output:
        expand("fastq/{{sample}}_{{type}}_{{read_or_index}}.{split}.fastq", split=list(range(config['fastq']['split_factor'])))
    threads: 1
    params:
        split_factor = config['fastq']['split_factor'],
        split_tool = get_script('split_fastq'),
        output_base = lambda w, input: str(input).replace(".fastq.gz", "")
    conda:
        "../env/compress-env.yml"
    shell:
        "{params.split_tool} {input} {params.split_factor} {params.output_base}"


rule compress_split_fastq:
    input:
        "fastq/{sample}_{type}_{read}.{split}.fastq"
    output:
        "fastq/{sample}_{type}_{read}.{split}.fastq.gz"
    threads: 
        config['fastq']['threads']
    conda:
        "../env/compress-env.yml"
    shell:
        "pigz -5 -p {threads} {input}"
