def get_trim_params(w, input, output, threads):
    '''
    accessory for Trimmomatic
    retrieves settings from config file and translates into Trimmomatic call
    '''

    if config['trim']['program'] == 'trimmomatic':
        trim_mode = ' '.join(config['trim']['mode']) # concatenate trim mode options
        adapter_file = os.path.join(config['snakedir'], config['trim']['adapters'])
        trim_mode = trim_mode.replace('<adapter>', adapter_file)
        files = list(input)
        files += list(output)
        files = " ".join(files)
        return f"{files} {trim_mode}"


rule trim_fastq_PE:
    input:
        expand("fastq/{{sample}}_{{type}}_{read}.{{split}}.fastq.gz", read=['R1', 'R2'])
    output:
        expand("fastq_trimmed/{{sample}}_{{type}}_{read}.{{split}}.{trim}.fastq.gz", read=['R1', 'R2'], trim=config['trim']['suffix'])
    conda:
        "../env/trim-env.yml"
    threads:
        config["trim"]["threads"]
    log:
        "logs/trim/{sample}_{type}.{split}.log"
    params:
        run = f"{config['setup']['run']} -phred{config['setup']['phred']}",
        files_n_mode = get_trim_params
    shell:
        "trimmomatic {params.run} -threads {threads} -trimlog {log} {params.files_n_mode}"
        
rule concat_fastq:
    '''
    fastq are concatenated for use in fastQC
    takes a long time
    '''
    input:
        expand("fastq_trimmed/{{sample}}_{{type}}_{{read}}.{split}.{{trim}}.fastq.gz", split=list(range(config['fastq']['split_factor'])))
    output:
        "fastq_trimmed/{sample}_{type}_{read}.{trim}.fastq.gz"

    threads: config['fastq']['threads']
    shell:
        "zcat fastq_trimmed/{wildcards.sample}_{wildcards.type}_{wildcards.read}.*.{wildcards.trim}.fastq.gz | pigz -5 -p {threads} > {output}"


